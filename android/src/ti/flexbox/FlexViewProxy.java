/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.flexbox;

import android.app.Activity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;

import com.google.android.flexbox.AlignContent;
import com.google.android.flexbox.AlignItems;
import com.google.android.flexbox.FlexDirection;
import com.google.android.flexbox.FlexWrap;
import com.google.android.flexbox.FlexboxLayout;
import com.google.android.flexbox.JustifyContent;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiDimension;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;


// This proxy can be created by calling TiFlexbox.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TiFlexboxModule.class)
public class FlexViewProxy extends TiViewProxy {
    // Standard Debugging variables
    private static final String LCAT = "ExampleProxy";
    private static final boolean DBG = TiConfig.LOGD;
    FlexboxLayout flexboxLayout;

    // Constructor
    public FlexViewProxy() {
        super();
    }

    @Override
    public TiUIView createView(Activity activity) {
        TiUIView view = new FlexView(this);
        view.getLayoutParams().autoFillsHeight = true;
        view.getLayoutParams().autoFillsWidth = true;
        return view;
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);
    }

    private class FlexView extends TiUIView {
        public FlexView(TiViewProxy proxy) {
            super(proxy);
            LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

            if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
                String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
                if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
                    arrangement = LayoutArrangement.HORIZONTAL;
                } else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
                    arrangement = LayoutArrangement.VERTICAL;
                }
            }


            flexboxLayout = new FlexboxLayout(TiApplication.getAppCurrentActivity());
            if (proxy.hasProperty("direction")) {
                if (proxy.getProperty("direction").equals("row")) {
                    flexboxLayout.setFlexDirection(FlexDirection.ROW);
                } else if (proxy.getProperty("direction").equals("rowReverse")) {
                    flexboxLayout.setFlexDirection(FlexDirection.ROW_REVERSE);
                } else if (proxy.getProperty("direction").equals("column")) {
                    flexboxLayout.setFlexDirection(FlexDirection.COLUMN);
                } else if (proxy.getProperty("direction").equals("columnReverse")) {
                    flexboxLayout.setFlexDirection(FlexDirection.COLUMN_REVERSE);
                }
            }
            if (proxy.hasProperty("wrap")) {
                if (proxy.getProperty("wrap").equals("wrap")) {
                    flexboxLayout.setFlexWrap(FlexWrap.WRAP);
                } else {
                    flexboxLayout.setFlexWrap(FlexWrap.NOWRAP);
                }
            }
            if (proxy.hasProperty("justifyContent")) {
                if (proxy.getProperty("justifyContent").equals("spaceBetween")) {
                    flexboxLayout.setJustifyContent(JustifyContent.SPACE_BETWEEN);
                } else if (proxy.getProperty("justifyContent").equals("spaceEvenly")) {
                    flexboxLayout.setJustifyContent(JustifyContent.SPACE_EVENLY);
                } else if (proxy.getProperty("justifyContent").equals("spaceAround")) {
                    flexboxLayout.setJustifyContent(JustifyContent.SPACE_AROUND);
                } else if (proxy.getProperty("justifyContent").equals("center")) {
                    flexboxLayout.setJustifyContent(JustifyContent.CENTER);
                } else if (proxy.getProperty("justifyContent").equals("flexEnd")) {
                    flexboxLayout.setJustifyContent(JustifyContent.FLEX_END);
                } else {
                    flexboxLayout.setJustifyContent(JustifyContent.FLEX_START);
                }
            }
            if (proxy.hasProperty("alignContent")) {
                if (proxy.getProperty("alignContent").equals("spaceBetween")) {
                    flexboxLayout.setAlignContent(AlignContent.SPACE_BETWEEN);
                } else if (proxy.getProperty("alignContent").equals("spaceAround")) {
                    flexboxLayout.setAlignContent(AlignContent.SPACE_AROUND);
                } else if (proxy.getProperty("alignContent").equals("center")) {
                    flexboxLayout.setAlignContent(AlignContent.CENTER);
                } else if (proxy.getProperty("alignContent").equals("flexEnd")) {
                    flexboxLayout.setAlignContent(AlignContent.FLEX_END);
                } else {
                    flexboxLayout.setAlignContent(AlignContent.FLEX_START);
                }
            }
            if (proxy.hasProperty("alignItems")) {
                if (proxy.getProperty("alignItems").equals("stretch")) {
                    flexboxLayout.setAlignItems(AlignItems.STRETCH);
                } else if (proxy.getProperty("alignItems").equals("baseline")) {
                    flexboxLayout.setAlignItems(AlignItems.BASELINE);
                } else if (proxy.getProperty("alignItems").equals("center")) {
                    flexboxLayout.setAlignItems(AlignItems.CENTER);
                } else if (proxy.getProperty("alignItems").equals("flexEnd")) {
                    flexboxLayout.setAlignItems(AlignItems.FLEX_END);
                } else {
                    flexboxLayout.setAlignItems(AlignItems.FLEX_START);
                }
            }

            FlexboxLayout.LayoutParams lp = new FlexboxLayout.LayoutParams(FlexboxLayout.LayoutParams.MATCH_PARENT, FlexboxLayout.LayoutParams.MATCH_PARENT);
            flexboxLayout.setLayoutParams(lp);

            setNativeView(flexboxLayout);
        }

        @Override
        public void processProperties(KrollDict d) {
            super.processProperties(d);
        }

        @Override
        public void add(TiUIView child) {
            View view = getNativeView(child.getProxy());
            int w = TiConvert.toInt(child.getProxy().getWidth());
            int h = TiConvert.toInt(child.getProxy().getHeight());

            TiDimension nativeWidth = new TiDimension(w, TiDimension.TYPE_WIDTH);
            TiDimension nativeHeight = new TiDimension(h, TiDimension.TYPE_HEIGHT);
            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(nativeWidth.getAsPixels(flexboxLayout), nativeHeight.getAsPixels(flexboxLayout));
            view.setLayoutParams(lp);
            flexboxLayout.addView(view);
        }

        private View getNativeView(TiViewProxy viewProxy) {
            TiUIView view = viewProxy.getOrCreateView();
            View outerView = view.getOuterView();
            View nativeView = outerView != null ? outerView : view.getNativeView();
            ViewGroup parentViewGroup = (ViewGroup) nativeView.getParent();
            if (parentViewGroup != null) {
                parentViewGroup.removeAllViews();
            }
            return nativeView;
        }
    }
}
